name: Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  GITHUB_HASH: $(git rev-parse --short "$GITHUB_SHA")
  ACCESS_KEY_ID: ${{secrets.ACCESS_KEY_ID}}
  SECRET_ACCESS_KEY: ${{secrets.SECRET_ACCESS_KEY}}
  SESSION_TOKEN: ${{secrets.SESSION_TOKEN}}

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Login Dockerhub
      env:
        DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - name: Build the Docker image
      run: docker build -t csg1-centraldeoportunidades-python .
    - name: Tag the image
      run: docker tag csg1-centraldeoportunidades-python:latest pchong77/csg1-centraldeoportunidades-python:${{env.GITHUB_HASH}}
    - name: Push to Dockerhub
      run: docker push pchong77/csg1-centraldeoportunidades-python:${{env.GITHUB_HASH}}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:

    - name: Checkout Repo
      uses: actions/checkout@v1

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.5

    - name: Terraform Init
      run: terraform init
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ACCESS_KEY_ID:  ${{ secrets.ACCESS_KEY_ID }}
        SECRET_ACCESS_KEY:  ${{ secrets.SECRET_ACCESS_KEY }}
        SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}
      working-directory: ./infra

    - name: Terraform Validate
      run: terraform validate -no-color
      working-directory: ./infra

    - name: Setup credentials
      run: |
        touch aws.env
        echo AWS_ACCESS_KEY_ID=ACCESS_KEY_ID >> aws.env
        echo AWS_SECRET_ACCESS_KEY=SECRET_ACCESS_KEY >> aws.env
        echo AWS_SESSION_TOKEN=SESSION_TOKEN >> aws.env
        cat aws.env
        source aws.env
      working-directory: ./infra

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color    
      continue-on-error: true
      working-directory: ./infra

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Terraform Apply
      run: terraform apply
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
        ACCESS_KEY_ID:  ${{ secrets.ACCESS_KEY_ID }}
        SECRET_ACCESS_KEY:  ${{ secrets.SECRET_ACCESS_KEY }}
        SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}
      working-directory: ./infra